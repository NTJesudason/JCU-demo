// Utility classes
// Keep in mind other files have utility classes specific to their function e.g. typography
@use '../variables.scss' as variables;
@use 'sass:math';
@use 'sass:map';

// mixin for bg opacity class, opacity value sets name and opacity value
// Set value as a whole number eg. 0.10 = 10
@mixin bg-opacity($opacity-value) {
    .opacity-#{$opacity-value} {
            position: relative;
            z-index: 0;
            overflow: hidden;
            // overrides the parent background color
            background-color: transparent !important;
        }
    
    .opacity-#{$opacity-value}::before {
        content: '';
        position: absolute;
        inset: 0;
        background-color: var(--bg-color);
        // Divide the value by 100 to get opacity value
        opacity: math.div($opacity-value, 100);
        z-index: -1;
        pointer-events: none;
    }
}

// Remove margin from last elements
:last-child {
    margin-bottom: 0 !important;
}

// Focus element for general focus
:focus {
    outline: 1px solid map.get(variables.$colours, focus);
}

// HR element
hr {
    margin: map.get(variables.$spacing, "100") 0;
    border: none;
    height: 1px;
    width: 100%;
    background-color: inherit;
}

// Border classes
.border-left {
    border-left: 1px solid;
    border-left-color: inherit;
}

@media (width >=variables.$mobile-breakpoint) {
    .border-left-med {
        border-left: 1px solid;
        border-left-color: inherit;
    }
}

.border {
    border: 1px solid;
    border-color: inherit;

    &.border-thick {
        border-width: 5px;
    }
}

// Designed to match HR
.border-bottom {
    border-bottom: 1px solid;
    border-right-color: inherit;
    box-sizing: border-box;
    padding-bottom: map.get(variables.$spacing, "100");
    margin-bottom: map.get(variables.$spacing, "100");
}

.border-right {
    border-right: 1px solid;
    border-right-color: inherit;
}

.border-primary-colour {
    border-color: map.get(variables.$colours, neutral-1);
}

// Opacity classes 
@include bg-opacity(10);
@include bg-opacity(30);
@include bg-opacity(50);
@include bg-opacity(80);

// Display classes
.d-none {
    display: none;
}

@media (width <=variables.$mobile-breakpoint) {
    .d-none-mobile {
        display: none;
    }
}

// Laptop / tablet
@media (width >=variables.$mobile-breakpoint) {
    .d-none-med {
        display: none;
    }
}

// Widescreen
@media (width >=variables.$desktop-breakpoint) {
    .d-none-lrg {
        display: none;
    }
}

.d-inline {
    display: inline;
}

.d-inline-block {
    display: inline-block;
}

.d-block {
    display: block;
}

// Flex classes
.flex {
    display: flex;
}

.flex-inline {
    display: inline-flex;
}

.flex-row {
    flex-direction: row;
}

.flex-column {
    flex-direction: column;
}

.flex-wrap {
    flex-wrap: wrap;
}

.flex-nowrap {
    flex-wrap: nowrap;
}

.space-between {
    justify-content: space-between;
}

.space-around {
    justify-content: space-around;
}

.space-evenly {
    justify-content: space-evenly;
}

.space-center {
    justify-content: center;
}

.align-start {
    align-items: flex-start;
}

.align-end {
    align-items: flex-end;
}

.align-center {
    align-items: center;
}

// Box shadow class
.box-shadow {
    box-shadow: 0 0 10px 0 rgba(0, 0, 0, .1);
    transition: box-shadow .2s;
}

.box-shadow:hover {
    box-shadow: 0 0 10px 0 rgba(0, 0, 0, .3);
}

// Infobox 
.infobox {
    display: block;
    margin-bottom: map.get(variables.$spacing, "200");
    padding: map.get(variables.$spacing, "100");
    background-color: map.get(variables.$colours, neutral-2);
}

// Border box
.border-box {
    box-sizing: border-box;
}

// Clear fix using flow-root
.clearfix {
    display: flow-root;
}

// Rounded corners
.round-sm {
    border-radius: 1rem;
}

.round-med {
    border-radius: 2rem;
}

// Overflow classes
.overflow_x-auto {
    overflow-x: auto;
}

// Height & width classes
.h-100 {
    height: 100%;
}

.w-100 {
    width: 100%;
}

// Misc classes
.no-select {
    user-select: none;
}

// Cursors
.grab {
    cursor: grab;
}

.grabbed {
    cursor: grabbing;
}
.pointer {
    cursor: pointer;

}

//for hidden text that still needs to be read by screen readers
.sr-only {
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
    clip: rect(0, 0, 0, 0);
    border-width: 0;
    white-space: nowrap;
}

// for things that need to be hidden from everything
.hidden {
    display: none !important;
    visibility: hidden;
}

//gap for flex-box when boxes go over multiple rows
.column-gap {
    column-gap: 1rem;
}